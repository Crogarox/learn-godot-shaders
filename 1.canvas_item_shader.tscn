[gd_scene load_steps=17 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://5 change value of uniform from code.gd" type="Script" id=2]

[sub_resource type="Shader" id=3]
code = "// This tells Godot we're writing canvas_item shader
shader_type canvas_item;

// With uniform we tells Godot this will be modified in editor and from code.
uniform vec4 base_color : hint_color = vec4(0.4, 0.6, 0.9, 1.0);


void fragment()
{
//	The most basic fragment function does nothing except assign a single color to every pixel.
	COLOR = base_color;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/base_color = Color( 0.4, 0.6, 0.901961, 1 )

[sub_resource type="Shader" id=1]
code = "// This tells Godot we're writing canvas_item shader
shader_type canvas_item;

// With uniform we tells Godot this will be modified in editor and from code.
uniform vec4 base_color : hint_color = vec4(0.4, 0.6, 0.9, 1.0);

void fragment(){
  COLOR = texture(TEXTURE, UV); //read from texture
  COLOR.b = 1.0; //set blue channel to 1.0
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/base_color = Color( 0.4, 0.6, 0.901961, 1 )

[sub_resource type="Shader" id=5]
code = "// This tells Godot we're writing canvas_item shader
shader_type canvas_item;

// With uniform we tells Godot this will be modified in editor and from code.
uniform vec4 base_color : hint_color = vec4(0.4, 0.6, 0.9, 1.0);

void fragment()
{
//	The most basic fragment function does nothing except assign a single color to every pixel.
  COLOR = vec4(UV, 0.5, 1.0);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/base_color = Color( 0.4, 0.6, 0.901961, 1 )

[sub_resource type="StreamTexture" id=7]
flags = 4
load_path = "res://.import/icon.png-487276ed1e3a0c39cad0279d744ee560.stex"

[sub_resource type="Shader" id=8]
code = "// This tells Godot we're writing canvas_item shader
shader_type canvas_item;

// With uniform we tells Godot this will be modified in editor and from code.
uniform vec4 base_color : hint_color = vec4(0.4, 0.6, 0.9, 1.0);
uniform float blue : hint_range(0.0, 1.0) = 1.0; // you can assign a default value to uniforms

void fragment()
{
//	The most basic fragment function does nothing except assign a single color to every pixel.
  	COLOR = vec4(UV, 1.0, 1.0);
	COLOR.b = blue;
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/base_color = Color( 0, 0.4, 1, 1 )
shader_param/blue = 0.0

[sub_resource type="Shader" id=10]
code = "// This tells Godot we're writing canvas_item shader
shader_type canvas_item;

// With uniform we tells Godot this will be modified in editor and from code.
uniform vec4 base_color : hint_color = vec4(0.4, 0.6, 0.9, 1.0);
uniform float blue : hint_range(0.0, 1.0) = 1.0; // you can assign a default value to uniforms

void fragment()
{
//	The most basic fragment function does nothing except assign a single color to every pixel.
  	COLOR = vec4(UV, 1.0, 1.0);
	COLOR.b = blue;
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/base_color = Color( 0, 0.4, 1, 1 )
shader_param/blue = 0.0

[sub_resource type="Shader" id=14]
code = "// This tells Godot we're writing canvas_item shader
shader_type canvas_item;

// With uniform we tells Godot this will be modified in editor and from code.
uniform vec4 base_color : hint_color = vec4(0.4, 0.6, 0.9, 1.0);
uniform float blue : hint_range(0.0, 1.0) = 1.0; // you can assign a default value to uniforms
//Use the vertex function to calculate where on the screen each vertex should end up.
void vertex()
{
	// Combined with the TIME built-in variable, this can be used for simple animation.
	// Animate Sprite moving in big circle around its location
	VERTEX += vec2(cos(TIME)*100.0, sin(TIME)*100.0);
}

void fragment()
{
//	The most basic fragment function does nothing except assign a single color to every pixel.
  	COLOR = vec4(UV, 1.0, 1.0);
	COLOR.b = blue;
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 14 )
shader_param/base_color = Color( 0, 0.4, 1, 1 )
shader_param/blue = 0.0

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/base_color = Color( 0, 0.4, 1, 1 )
shader_param/blue = 0.0

[node name="Node2D" type="Node2D"]

[node name="1 change COLOR  in fragment function" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 80.1299, 82.8787 )
texture = ExtResource( 1 )

[node name="2 change UV COLOR" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 259.38, 81.2535 )
texture = ExtResource( 1 )

[node name="3 using TEXTURE buildin" type="Sprite" parent="."]
material = SubResource( 6 )
position = Vector2( 177.348, 82.6189 )
texture = SubResource( 7 )

[node name="4 using uniform" type="Sprite" parent="."]
material = SubResource( 9 )
position = Vector2( 339.219, 81.1055 )
texture = SubResource( 7 )

[node name="5 change value of uniform from code" type="Sprite" parent="."]
material = SubResource( 11 )
position = Vector2( 446.349, 79.6897 )
texture = SubResource( 7 )
script = ExtResource( 2 )

[node name="6 vertex function" type="Sprite" parent="."]
material = SubResource( 13 )
position = Vector2( 77.2389, 176.563 )
texture = SubResource( 7 )

[node name="7 Combined with the TIME built-in variable" type="Sprite" parent="."]
material = SubResource( 15 )
position = Vector2( 77.2389, 176.563 )
texture = SubResource( 7 )
